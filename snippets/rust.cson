'.source.rust':
  # Attributes
  'Local allow attribute':
    prefix: 'allow'
    body: '#[allow(${1:lint})]'
  'Global allow attribute':
    prefix: 'allow!'
    body: '#![allow(${1:lint})]'
  'Cfg attribute':
    prefix: 'cfg'
    body: '#[cfg($1)]'
  'Local deny attribute':
    prefix: 'deny'
    body: '#[deny(${1:lint})]'
  'Global deny attribute':
    prefix: 'deny!'
    body: '#![deny(${1:lint})]'
  'Derive attribute':
    prefix: 'derive'
    body: '#[derive(${1:Trait})]'
  'Feature attribute':
    prefix: 'feature'
    body: '#![feature(${1:feature})]'
  'No std attribute':
    prefix: 'no_std'
    body: '#![no_std]'
  'No main attribute':
    prefix: 'no_main'
    body: '#![no_main]'
  'Local warn attribute':
    prefix: 'warn'
    body: '#[warn(${1:lint})]'
  'Global warn attribute':
    prefix: 'warn!'
    body: '#![warn(${1:lint})]'
  'Makes clippy annoying':
    prefix: "clippy"
    body: '''
      #![warn(
      \tclippy::all,
      \tclippy::restriction,
      \tclippy::pedantic,
      \tclippy::nursery,
      \tclippy::cargo,
      )]
    '''
  'Macro export attribute':
    prefix: 'macroexp'
    body: '#[macro_export]'
  'Repr attribute':
    prefix: 'repr'
    body: '#[repr($1)]'

  # Definitions
  'Enum definition':
    prefix: 'enum'
    body: '''
      enum ${1:TypeName} {
      \t$2
      }
    '''
  'Impl definition':
    prefix: 'impl'
    body: '''
      impl ${1:TypeName} {
      \t$2
      }
    '''
  'Impl for trait definition':
    prefix: 'implf'
    body: '''
      impl ${1:Trait} for ${2:TypeName} {
      \t$2
      }
    '''
  'Macro definition':
    prefix: 'macro'
    body: '''
      macro_rules! ${1:macro_name} {
      \t($2) => ($3);
      }
    '''
  'Struct definition':
    prefix: 'struct'
    body: '''
      struct ${1:TypeName} {
      \t$2
      }
    '''
  'Tarit definition':
    prefix: 'trait'
    body: '''
      trait ${1:TraitName} {
      \t$2
      }
    '''
  'Union definition':
    prefix: 'union'
    body: '''
      union ${1:TypeName} {
      \t$2
      }
    '''

  # Bindings
  'Function declaration with no result':
    prefix: 'fn'
    body: '''
      fn ${1:function_name}($2) {
      \t${3:unimplemented!()}
      }
    '''
  'Function declaration with result':
    prefix: 'fnr'
    body: '''
      fn ${1:function_name}($2) -> ${3:TypeName} {
      \t${4:unimplemented!()}
      }
    '''
  'Constant declaration':
    prefix: 'const'
    body: 'const ${1:NAME}: ${2:TypeName} = ${3:value}'
  'Let declaration':
    prefix: 'let'
    body: 'let ${1:variable} = ${2:value};'
  'Static declaration':
    prefix: 'static'
    body: 'static ${1:NAME}: ${2:TypeName} = ${3:value};'
  'Type alias':
    prefix: 'type'
    body: 'type ${1:TypeName} = ${2:TypeName};'

  # Control flow
  'For':
    prefix: 'for'
    body: '''
      for ${1:variable} in ${2:iterator} {
      \t$3
      }
    '''
  'If':
    prefix: 'if'
    body: '''
      if ${1:expression} {
      \t$2
      }
    '''
  'If and else':
    prefix: 'if-else'
    body: '''
      if ${1:expression} {
      \t$2
      } else {
      \t$3
      }
    '''
  'If, elseif and else':
    prefix: 'if-elseif-else'
    body: '''
      if ${1:expression} {
      \t$2
      } esle if ${3:expression} {
      \t$4
      } else {
      \t$5
      }
    '''
  'If let':
    prefix: 'if-let'
    body: '''
      if let ${1:pattern} = ${2:expr} {
      \t$3
      }
    '''
  'If let with else':
    prefix: "if-let-else"
    body: '''
      if let ${1:pattern} = ${2:expr} {
      \t$3
      } else {
      \t
      }
    '''
  'Loop':
    prefix: 'loop'
    body: '''
      loop {
      \t$1
      }
    '''
  'While':
    prefix: 'while'
    body: '''
      while ${1:expression} {
      \t$2
      }
    '''
  'While let':
    prefix: 'while-let'
    body: '''
      while let ${1:pattern} = ${2:expr} {
      \t$3
      }
    '''
  'Match':
    prefix: 'match'
    body: '''
      match ${1:expression} {
      \t$2
      }
    '''

  # Unit testing
  'Test function declaration':
    prefix: 'test'
    body: '''
      #[test]
      fn ${1:test_name}() {
      \t${2:unimplemented!()}
      }
    '''
  'Test module creation':
    prefix: 'testmod'
    body: '''
      #[cfg(test)]
      mod tests {
      \tuse super::*;

      \t#[test]
      \tfn ${1:test_name}() {
      \t\t${2:unimplemented!()}
      \t}
      }
    '''

  # Macros
  'Assert macro':
    prefix: 'assert'
    body: 'assert!($1);'
  'Assert equal macro':
    prefix: 'assert_eq'
    body: 'assert_eq!($1, $2);'
  'Assert not equal macro':
    prefix: 'assert_ne'
    body: 'assert_ne!($1, $2);'
  'Print to stderr macro':
    prefix: 'eprint'
    body: 'eprint!("${1:{${2::?}\\}}", ${3});'
  'Print to stderr with newline macro':
    prefix: 'eprintln'
    body: 'eprintln!("${1:{${2::?}\\}}", ${3});'
  'Print to stdout macro':
    prefix: 'print'
    body: 'print!("${1:{${2::?}\\}}", ${3});'
  'Print to stdout with newline macro':
    prefix: 'println'
    body: 'println!("${1:{${2::?}\\}}", ${3});'
  'Stringify macro':
    prefix: 'stringify'
    body: 'stringify!($1);'
  'Todo macro':
    prefix: 'todo'
    body: 'todo!($1)$2'
  'Unimplemented macro':
    prefix: 'unimplemented'
    body: 'unimplemented!($1)$2'
  'Unreachable macro':
    prefix: 'unreachable'
    body: 'unreachable!($1)$2'
  'Write macro':
    prefix: 'write'
    body: 'write!(${1:out}, "${2:{${3::?}\\}}", ${4});'
  'Write with newline macro':
    prefix: 'writeln'
    body: 'writeln!(${1:out}, "${2:{${3::?}\\}}", ${4});'

  # Misc
  'Main function declaration':
    prefix: 'main'
    body: '''
      fn main() {
      \t${1:unimplemented!()}
      }
    '''

  'Main function declaration with Result':
    prefix: 'mainres'
    body: '''
      fn main() -> Result<(), Box<dyn std::error::Error>> {
      \t${1:unimplemented!()}
      }
    '''

  'Start function declaration':
    prefix: 'start'
    body: '''
      #![no_main]
      fn _start() -> ! {
      \t${1:unimplemented!()}
      }
    '''
