name: 'Rust'
scopeName: 'source.rust'
type: 'tree-sitter'
parser: 'tree-sitter-rust'
injectionRegex: 'rust'
injectionRegExp: 'rust'

fileTypes: [
  'rs'
]

comments:
  start: '// '

folds: [
  {
    type: 'block_comment'
  }
  {
    start: {index: 0, type: '{'}
    end: {index: -1, type: '}'}
  }
  {
    start: {index: 0, type: '['}
    end: {index: -1, type: ']'}
  }
  {
    start: {index: 0, type: '('}
    end: {index: -1, type: ')'}
  }
  {
    start: {index: 0, type: '<'}
    end: {index: -1, type: '>'}
  }
]

scopes:
  'source_file': 'source.rust'

  'type_identifier': [
    {match: '^[A-Z\\d_]{1,}$', scopes: 'constant.other'},
    'support.type.other'
  ]
  'primitive_type': 'support.type.primitive'
  'empty_type' : 'support.type.never'
  'unit_type' : 'support.type.unit'
  'field_identifier': 'variable.other.member'

  'line_comment': 'comment.block.line'
  'block_comment': 'comment.block.block'

  '''identifier''': [
    {match: '^[A-Z\\d_]{2,}$', scopes: 'constant.other'}
  ]

  # Macro related stuff
  '''
    macro_invocation > identifier,
    macro_invocation > scoped_identifier > identifier:nth-child(2),
    macro_invocation > "!",
  ''' : 'entity.name.macro.call'

  'macro_definition > identifier' : 'entity.name.macro.def'

  'metavariable': 'variable.other.meta'

  # Fragment specifier types
  'fragment_specifier > "block"': 'support.type.fragment.block'
  'fragment_specifier > "expr"': 'support.type.fragment.expr'
  'fragment_specifier > "ident"': 'support.type.fragment.ident'
  'fragment_specifier > "item"': 'support.type.fragment.item'
  'fragment_specifier > "lifetime"': 'support.type.fragment.lifetime'
  'fragment_specifier > "literal"': 'support.type.fragment.literal'
  'fragment_specifier > "meta"': 'support.type.fragment.meta'
  'fragment_specifier > "pat"': 'support.type.fragment.pat'
  'fragment_specifier > "path"': 'support.type.fragment.path'
  'fragment_specifier > "stmt"': 'support.type.fragment.stmt'
  'fragment_specifier > "tt"': 'support.type.fragment.tt'
  'fragment_specifier > "ty"': 'support.type.fragment.ty'
  'fragment_specifier > "vis"': 'support.type.fragment.vis'

  '''
    token_repetition > "$",
    token_repetition_pattern > "$"
  ''': 'support.repetiton.start'

  '''
    token_repetition > "*",
    token_repetition_pattern > "*"
  ''': 'support.repetiton.zero_or_more'

  '''
    token_repetition > "+",
    token_repetition_pattern > "+"
  ''': 'support.repetiton.one_or_more'

  '''
    token_repetition > "?",
    token_repetition_pattern > "?"
  ''': 'support.repetiton.zero_or_one'

  # Enums
  '''
    identifier,
    call_expression > identifier,
    call_expression > field_expression > field_identifier,
    call_expression > scoped_identifier > identifier:nth-child(2)
  ''': [
    {match: '^[A-Z]', scopes: 'entity.name.enum'},
  ]

  # Functions
  '''
    generic_function > identifier,
    generic_function > field_expression > field_identifier,
    generic_function > scoped_identifier > identifier,
    function_item > identifier,
    function_signature_item > identifier,
  ''' : [
    {match: '^[A-Z]', scopes: 'entity.name.enum'},
    'entity.name.function'
  ]

  '''
    call_expression > identifier,
    call_expression > field_expression > field_identifier,
    call_expression > scoped_identifier > identifier:nth-child(2),
  ''' : [
    {match: '^[A-Z]', scopes: 'entity.name.enum'},
    'entity.name.function.call'
  ]

  # Other
  '''
    use_list > self,
    scoped_use_list > self,
    scoped_identifier> self,
    use_list > crate,
    scoped_use_list > crate,
    scoped_identifier> crate,
    use_list > super,
    scoped_use_list > super,
    scoped_identifier> super
  ''': 'keyword.control.crate'

  '''
    use_wildcard > identifier:nth-child(0),
    use_wildcard > scoped_identifier > identifier:nth-child(2),
    scoped_type_identifier > identifier:nth-child(0),
    scoped_type_identifier > scoped_identifier:nth-child(0) > identifier,
    scoped_identifier > identifier:nth-child(0),
    scoped_identifier > scoped_identifier:nth-child(0) > identifier,
    use_declaration > identifier,
    use_declaration > scoped_identifier > identifier,
    use_as_clause > identifier,
    use_as_clause > scoped_identifier > identifier,
    use_list > identifier,
    use_list > scoped_identifier > identifier,
    meta_item > identifier
  ''': [
    {match: '^[A-Z\\d_]{2,}$', scopes: 'constant.other'},
    {match: '^[A-Z]', scopes: 'support.type'},
  ]

  '''
    parameter > identifier,
    closure_parameters > identifier,
    closure_parameters > tuple_pattern > identifier,
  ''' : 'entity.name.variable.parameter'

  'lifetime' : 'entity.name.lifetime'
  'loop_label' : 'entity.name.loop-label'
  'field_identifier' : 'entity.name.variable.field'
  'self' : 'entity.name.variable.self'
  'closure_expression' : 'entity.name.closure'
  'remaining_field_pattern' : 'entity.name.match-remaining'

  'impl_item > "!"' : 'entity.other.trait-negation'

  '"async"'  : 'storage.modifier.async'
  '"let"'    : 'storage.modifier.let'
  '"const"'  : 'storage.modifier.const'
  '"static"' : 'storage.modifier.static'
  '"extern"' : 'storage.modifier.extern'
  '"fn"'     : 'storage.modifier.fn'
  '"type"'   : 'storage.modifier.type'
  '"impl"'   : 'storage.modifier.impl'
  '"dyn"'    : 'storage.modifier.dyn'
  '"trait"'  : 'storage.modifier.trait'
  '"mod"'    : 'storage.modifier.mod'
  '"pub"'    : 'storage.modifier.pub'
  '"crate"'  : 'storage.modifier.crate'
  '"default"': 'storage.modifier.default'
  '"struct"' : 'storage.modifier.struct'
  '"enum"'   : 'storage.modifier.enum'
  '"union"'  : 'storage.modifier.union'
  'mutable_specifier': 'storage.modifier.mut'

  'await_expression > "await"' : 'keyword.control.await'
  '"unsafe"'   : 'keyword.control.unsafe'
  '"use"'      : 'keyword.control.use'
  '"match"'    : 'keyword.control.match'
  '"if"'       : 'keyword.control.if'
  '"in"'       : 'keyword.control.in'
  '"else"'     : 'keyword.control.else'
  '"move"'     : 'keyword.control.move'
  '"while"'    : 'keyword.control.while'
  '"loop"'     : 'keyword.control.loop'
  '"for"'      : 'keyword.control.for'
  '"let"'      : 'keyword.control.let'
  '"return"'   : 'keyword.control.return'
  '"continue"' : 'keyword.control.continue'
  '"break"'    : 'keyword.control.break'
  '"where"'    : 'keyword.control.where'
  '"ref"'      : 'keyword.control.ref'
  '"macro"'    : 'keyword.control.macro'
  '"macro_rules!"': 'keyword.control.macro-def'
  'closure_parameters > "|"' : 'keyword.control.closure-def'

  '"as"': 'keyword.operator.as'
  '":"' : 'keyword.operator.constraint'
  '"::"': 'keyword.operator.namespace'
  '"="' : 'keyword.operator.assign'
  'captured_pattern > "@"'    : 'keyword.operator.pattern-binding'
  'unary_expression > "*"'    : 'keyword.operator.dereference'
  'unary_expression > "!"'    : 'keyword.operator.not'
  'pointer_type > "*"'        : 'keyword.operator.pointer'
  'removed_trait_bound > "?"' : 'keyword.operator.rm-trait-bound'
  'try_expression > "?"'      : 'keyword.operator.error-propagation'

  '''
    self_parameter > "&",
    reference_pattern > "&",
    reference_expression > "&",
    reference_type > "&"
  ''' : 'keyword.operator.reference'

  '''
    binary_expression > "+",
    binary_expression > "-",
    binary_expression > "/",
    binary_expression > "*",
    binary_expression > "%",
    binary_expression > "<<",
    binary_expression > ">>",
  ''' : 'keyword.operator.math'

  '''
    compound_assignment_expr > "+=",
    compound_assignment_expr > "-=",
    compound_assignment_expr > "/=",
    compound_assignment_expr > "*=",
    compound_assignment_expr > "%=",
    compound_assignment_expr > "<<=",
    compound_assignment_expr > ">>=",
  ''' : 'keyword.operator.math.assign'

  '''
    binary_expression > "&",
    binary_expression > "|",
    binary_expression > "^",
  ''' : 'keyword.operator.logic.bitwise'

  '''
    compound_assignment_expr > "&=",
    compound_assignment_expr > "|=",
    compound_assignment_expr > "^=",
  ''' : 'keyword.operator.logic.bitwise.assign'

  '''
    binary_expression > "<",
    binary_expression > ">",
    binary_expression > "==",
    binary_expression > "<=",
    binary_expression > ">=",
    binary_expression > "!=",
  ''' : 'keyword.operator.cmp'

  '''
    binary_expression > "&&",
    binary_expression > "||",
  ''' : 'keyword.operator.logic.boolean'

  '''
    range_expression > "..",
    range_expression > "..=",
    range_expression > "...",
  ''' : 'keyword.operator.ranges'

  'match_arm > "=>", last_match_arm > "=>"' : 'keyword.operator.match-arm'
  'macro_rule > "=>"' : 'keyword.operator.match-rule'

  '''
    "->",
    "<-",
    "<=",
  ''' : 'keyword.operator.misc'

  '''
    "-", "/", "%", "<<", ">>", "&&", "||", "<", ">", "=>", "<-",
    "==", "<=", ">=", "!=", "&", "|", "^", "..", "..=", "...", "->"
  ''' : 'misc.other'

  'unit_expression'    : 'constant.language.unit'
  'char_literal'       : 'string.quoted.single'
  'string_literal'     : 'string.quoted.double'
  'raw_string_literal' : 'string.quoted.other'
  'boolean_literal'    : 'constant.language.boolean'
  'integer_literal'    : 'constant.numeric.decimal'
  'float_literal'      : 'constant.numeric.decimal'
  'escape_sequence'    : 'constant.character.escape'
  'unary_expression > "-"' : 'constant.numeric.neg'

  'attribute_item, inner_attribute_item': 'entity.attribute.name'
