name: 'Rust'
scopeName: 'source.rust'
fileTypes: ['rs']

repository: {

  # Comments

  'line_comment': {
    name: 'comment.line.rust'
    begin: '//'
    end: '$'
  }
  'line_doc_comment': {
    name: 'comment.line.documentation.rust'
    begin: '//[!/](?=[^/])'
    end: '$'
    patterns: [
      { include: '#markdown' }
    ]
  }
  'block_comment': {
    name: 'comment.block.rust'
    begin: '/\\*'
    end: '\\*/'
    patterns: [
      { include: '#block_comment' }
      { include: '#block_doc_comment' }
    ]
  }
  'block_doc_comment': {
    name: 'comment.block.documentation.rust'
    begin: '(/\\*[\\*!](?![\\*/]))'
    end: '(\\*/)'
    beginCaptures: {
      '1': { name: 'invalid.deprecated.rust' }
    }
    endCaptures: {
      '1': { name: 'invalid.deprecated.rust' }
    }
    patterns: [
      {
        begin: '^\\s*(\\*)(?!/)'
        end: '$'
        beginCaptures: {
          '1': { name: 'invalid.deprecated.rust' }
        }
        patterns: [
          { include: '#block_comment' }
          { include: '#block_doc_comment' }
          { include: '#markdown' }
        ]
      }
      { include: '#block_comment' }
      { include: '#block_doc_comment' }
      { include: '#markdown' }
    ]
  }

  'comments': {
    patterns: [
      { include: '#block_doc_comment' }
      { include: '#block_comment' }
      { include: '#line_doc_comment' }
      { include: '#line_comment' }
    ]
  }

  # Markdown for documentation comments

  'md_inline': {
    patterns: [
      {
        comment: 'Italic'
        begin: '\\*(?!\\*)(?=.+\\*)'
        end: '\\*'
        name: 'markup.italic.documentation.rust'
        patterns: [
          { include: '#md_inline' }
        ]
      }
      {
        comment: 'Italic'
        begin: '_(?!_)(?=.+_)'
        end: '_'
        name: 'markup.italic.documentation.rust'
        patterns: [
          { include: '#md_inline' }
        ]
      }
      {
        comment: 'Bold'
        begin: '\\*\\*(?!\\*\\*)(?=.+\\*\\*)'
        end: '\\*\\*'
        name: 'markup.bold.documentation.rust'
        patterns: [
          { include: '#md_inline' }
        ]
      }
      {
        comment: 'Underline'
        begin: '__(?!__)(?=.+__)'
        end: '__'
        name: 'markup.underline.documentation.rust'
        patterns: [
          { include: '#md_inline' }
        ]
      }
    ]
  }

  'markdown': {
    patterns: [
      # Headers
      {
        begin: '(#{1,6})(#*)'
        end: '$'
        name: 'markup.heading.documentation.rust'
        captures: {
          '1': { name: 'markup.heading.punctuation.definition.documentation.rust' }
          '2': { name: 'markup.invalid.illegal.documentation.rust' }
        }
        patterns: [
          { include: 'md_inline' }
        ]
      }
      # Links
      {
        match: '!?\\[(.*?)\\](?:\\(([^\\s\\)]+)(?:\\s+(["\'].*?["\']))?\\)|(\\(\\)))'
        name: 'markup.link.documentation.rust'
        captures: {
          '1': { name: 'markup.link.text.documentation.rust' }
          '2': { name: 'markup.link.entity.documentation.rust' }
          '3': { name: 'markup.link.entity.documentation.rust' }
          '4': { name: 'markup.invalid.illegal.documentation.rust' }
        }
      }
      {
        match: '(\\[(.*?)\\]\\:\\s*([^\\s\\)]+))'
        captures: {
          '1': { name: 'markup.link.documentation.rust' }
          '2': { name: 'markup.link.text.documentation.rust' }
          '3': { name: 'markup.link.entity.documentation.rust' }
        }
      }
      # Inline code
      {
        match: '`(?!`).*?`'
        name: 'markup.code.raw.inline.documentation.rust'
      }
      # Block code
      {
        begin: '(```)(\\w*)'
        end: '\\s*//[/!]\\s*(>\\s*)*(```)'
        beginCaptures: {
          '1': { name: 'markup.code.raw.block.documentation.rust' }
          '2': { name: 'markup.code.raw.block.name.bold.documentation.rust' }
        }
        endCaptures: {
          '2': { name: 'markup.code.raw.block.documentation.rust' }
        }
        patterns: [
          {
            match: '\\s*//[/!]\\s*(>\\s*)*(?!```)'
            #name: 'comment.line.documentation.rust'
          }
          {
            match: '(?<!```).+(?!```)'
            name: 'markup.code.raw.block.documentation.rust'
          }
        ]
      }

      { include: '#md_inline' }
    ]
  }

  # Literals

  'literals': {
    patterns: [
      { include: '#string_literal' }
      { include: '#raw_string_literal' }
      { include: '#character_literal' }
      { include: '#number_literal' }
      { include: '#boolean_literal' }
    ]
  }

  ## Strings

  'escaped_character': {
    name: 'constant.character.escape.rust'
    match: '\\\\(x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
  }

  'string_literal': {
    name: 'string.quoted.double.rust'
    begin: 'b?"'
    end: '"'
    patterns: [
      { include: '#escaped_character' }
    ]
  }

  'raw_string_literal': {
    name: 'string.quoted.double.raw.rust'
    begin: '(?:b?r|(rb))(#*)"'
    end: '"\\2(#*)'
    beginCaptures: {
      '1': { name: 'invalid.illegal.rust' }
    }
    endCaptures: {
      '1': { name: 'invalid.illegal.rust' }
    }
  }

  'character_literal': {
    name: 'string.quoted.single.rust'
    match: '(b?\')(?:[^\'\\\\]|\\\\(?:x\\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.))([^\']*)(\')'
    captures: {
      '1': { name: '' }
      '2': { name: 'invalid.illegal.rust' }
      '3': { name: '' }
    }
  }

  ## Format strings

  'format_string_literal': {
    name: 'string.quoted.double.format.rust'
    begin: '"'
    end: '"'
    patterns: [
      { include: '#escaped_character' }
      {
        name: 'constant.character.escape.rust'
        match: '{{|}}'
      }
      {
        comment: 'Format string thing'
        name: 'punctuation.section.embedded.meta.tag.format.rust'
        begin: "{"
        end: "}"
        patterns: [
          {
            # I hope you like regular expressions
            match: '(?:([0-9]+)|(\\p{Alpha}\\w*|_\\w+))?(?:(\\:)(.?[<>\\^])?([\\+\\-])?(#)?0?(?:((?:([0-9]+)|\\p{Alpha}\\w*|_\\w+)\\$)|([0-9]+))?(?:\\.(?:(?:((?:([0-9]+)|\\p{Alpha}\\w*|_\\w+)\\$)|([0-9]+))|\\*))?(\\?|\\p{Alpha}\\w*|_\\w+)?)?'
            captures: {
              '1': { name: 'constant.numeric.integer.format.argument.rust' }
              '2': { name: 'constant.variable.parameter.format.argument.rust' }
              '3': { name: 'meta.separator.format.rust' }
              '4': { name: 'punctuation.parameters.format.fill.rust' }
              '5': { name: 'punctuation.separator.format.sign.rust' }
              '6': { name: 'punctuation.separator.format.alt.rust' }
              '7': { name: 'constant.variable.format.width.argument.rust' }
              '8': { name: 'constant.numeric.integer.format.width.argument.rust' }
              '9': { name: 'constant.numeric.integer.format.width.rust' }
              '10': { name: 'constant.variable.format.precision.argument.rust' }
              '11': { name: 'constant.numeric.integer.format.precision.argument.rust' }
              '12': { name: 'constant.numeric.integer.format.precision.rust' }
              '13': { name: 'support.type.format.type.rust' }
            }
          }
        ]
      }
    ]
  }

  'format_named_arg': {
    match: '(\\p{Alpha}\\w*|_\\w+)\\s*(?==)'
    captures:
      '1': { name: 'constant.variable.parameter.format.argument.rust' }
  }

  ## Numbers

  'floating_point_literal': {
    patterns: [
      {
        comment: 'Floating point literal (basic)'
        name: 'constant.numeric.float.rust'
        match: '\\b([0-9][0-9_]*\\.[0-9][0-9_]*)\\b'
      }
      {
        comment: 'Floating point literal (typed)'
        name: 'constant.numeric.float.rust'
        match: '\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?)(f32|f64)\\b'
      }
      {
        comment: 'Floating point literal (exponent)'
        name: 'constant.numeric.float.rust'
        match: '\\b([0-9][0-9_]*(?:\\.[0-9][0-9_]*)?[eE][+-]?[0-9_]+)(f32|f64)?\\b'
      }
    ]
  }

  'integer_literal': {
    patterns: [
      {
        comment: 'Integer literal (decimal)'
        name: 'constant.numeric.integer.decimal.rust'
        match: '\\b([0-9][0-9_]*)(?:([ui](?:8|16|32|64|128|size))|(int|uint|is|us))?\\b'
        captures: {
          '3': { name: 'invalid.illegal.rust' }
        }
      }
      {
        comment: 'Integer literal (hexadecimal)'
        name: 'constant.numeric.integer.hexadecimal.rust'
        match: '\\b(0x[a-fA-F0-9_]+)(?:([ui](?:8|16|32|64|128|size))|(int|uint|is|us))?\\b'
        captures: {
          '3': { name: 'invalid.illegal.rust' }
        }
      }
      {
        comment: 'Integer literal (octal)'
        name: 'constant.numeric.integer.octal.rust'
        match: '\\b(0o[0-7_]+)(?:([ui](?:8|16|32|64|128|size))|(int|uint|is|us))?\\b'
        captures: {
          '3': { name: 'invalid.illegal.rust' }
        }
      }
      {
        comment: 'Integer literal (binary)'
        name: 'constant.numeric.integer.binary.rust'
        match: '\\b(0b[01_]+)(?:([ui](?:8|16|32|64|128|size))|(int|uint|is|us))?\\b'
        captures: {
          '3': { name: 'invalid.illegal.rust' }
        }
      }
    ]
  }

  'number_literal': {
    patterns: [
      { include: '#floating_point_literal' }
      { include: '#integer_literal' }
    ]
  }

  ## Other

  'boolean_literal': {
    name: 'constant.language.boolean.rust'
    match: '\\b(true|false)\\b'
  }

  # Keywords

  ## Modifiers

  'modifiers': {
    patterns: [
      {
        comment: 'Mutable storage modifier'
        name: 'storage.modifier.mut.rust'
        match: '\\bmut\\b'
      }
      {
        comment: 'Visibility modifier'
        name: 'storage.modifier.visibility.rust'
        match: '\\bpub\\b'
      }
      {
        comment: 'Const storage modifier'
        name: 'storage.modifier.const.rust'
        match: '\\bconst\\b'
      }
      {
        comment: 'Static storage modifier'
        name: 'storage.modifier.static.rust'
        match: '\\bstatic\\b'
      }
      {
        comment: 'Unsafe code keyword'
        name: 'keyword.other.unsafe.rust'
        match: '\\bunsafe\\b'
      }
    ]
  }

  ## Types

  'types': {
    patterns: [
      {
        comment: 'Built-in/core type'
        name: 'storage.type.core.rust'
        match: '\\b(bool|char|usize|isize|[ui](?:8|16|32|64|128)|f(?:32|64)|str|String|Self|Option|Result)\\b'
      }
      {
        comment: 'Standard library type'
        name: 'storage.class.std.rust'
        match: '\\b(Path|PathBuf|Arc|Weak|Box|Rc|Vec|VecDeque|LinkedList|HashMap|BTreeMap|HashSet|BTreeSet|BinaryHeap)\\b'
      }
    ]
  }

  ## Traits

  'traits': {
    patterns: [
      {
        comment: 'Core trait'
        name: 'support.type.core.rust'
        match: '\\b(Any|FixedSizeArray|Borrow|BorrowMut|Clone|Eq|Ord|PartialEq|PartialOrd|AsMut|AsRef|From|Into|TryFrom|TryInfo|Default|Debug|Display|Write|Binary|LowerExp|LowerHex|Octal|Pointer|UpperExp|UpperHex|BuildHasher|Hash|Hasher|DoubleEndedIterator|ExactSizeIterator|Extend|FromIterator|IntoIterator|Iterator|Product|Step|Sum|Zeroable|One|Zero|SliceExt|FromStr)\\b'
      }
      {
        comment: 'Core trait (marker)'
        name: 'support.type.marker.rust'
        match: '\\b(Copy|Send|Sized|Sync|Reflect|Unsize)\\b'
      }
      {
        comment: 'Core trait (ops)'
        name: 'support.type.marker.rust'
        match: '\\b(Add|AddAssign|BitAnd|BitAndAssign|BitOr|BitOrAssign|BitXor|BitXorAssign|Deref|DerefMut|Div|DivAssign|Drop|Fn|FnMut|FnOnce|Index|IndexMut|Mul|MulAssign|Neg|Not|Rem|RemAssign|Shl|ShlAssign|Shr|ShrAssign|Sub|SubAssign|BoxPlace|Boxed|CoerceUnsized|InPlace|Place|Placer)\\b'
      }
      {
        comment: 'Standard library trait'
        name: 'support.type.std.rust'
        match: '\\b(FnBox|ToOwned|ToString)\\b'
      }
    ]
  }

  ## Macros

  'macros': {
    patterns: [
      # Built-in macro
      {
        name: 'support.function.macro.builtin.rust'
        match: '\\b(macro_rules|log_syntax|asm|trace_macros)!'
      }
      # Core macro
      {
        name: 'support.function.macro.core.rust'
        match: '\\b(assert|assert_eq|debug_assert|debug_assert_eq|try|unimplemented|unreachable)!'
      }
      # Standard library macro
      {
        name: 'support.function.macro.std.rust'
        match: '\\b(cfg|column|concat|env|file|include|include_bytes|include_str|line|module_path|option_env|stringify|thread_local|concat_idents|select|vec)!'
      }
      # Format macro
      {
        begin: '\\b(?:((?:write|writeln|panic)!)|((?:format|format_args|print|println|eprint|eprintln)!))'
        end: '[\\)\\]\\}]'
        beginCaptures: {
          '1': { name: 'support.function.macro.core.rust' }
          '2': { name: 'support.function.macro.std.rust' }
        }
        patterns: [
          { include: '#format_string_literal' }
          { include: '#format_named_arg' }
          { include: '$base' }
        ]
      }
      # Logging macro
      {
        name: 'support.function.log.rust'
        match: '\\b(log_enabled)!'
      }
      {
        comment: 'Logging format macro'
        begin: '\\b((?:log|error|warn|info|debug|trace)!)'
        end: '[\\)\\]\\}]'
        beginCaptures: {
          '1': { name: 'support.function.macro.log.rust' }
        }
        patterns: [
          { include: '#format_string_literal' }
          { include: '#format_named_arg' }
          { include: '$base' }
        ]
      }
    ]
  }

  ## Special variables

  'special_enums': {
    patterns: [
      {
        comment: 'Enum'
        name: 'support.constant.core.rust'
        match: '\\b(Some|None|Ok|Err)\\b'
      }
    ]
  }

  'self': {
    comment: 'Self variable'
    name: 'keyword.other.self.rust'
    match: '\\bself\\b'
  }

  'special_variables': {
    patterns: [
      { include: '#special_enums' }
      { include: '#self' }
    ]
  }

  # Operators

  'structure_operators': {
    comment: 'Miscellaneous operator'
    name: 'keyword.operator.misc.rust'
    match: '->|=>|::|:'
  }

  'operators': {
    patterns: [
      { include: '#structure_operators' }
      {
        comment: 'Comparison operator'
        name: 'keyword.operator.comparison.rust'
        match: '&&|\\|\\||==|!='
      }
      {
        comment: 'Assignment operator'
        name: 'keyword.operator.assignment.rust'
        match: '\\+=|-=|/=|\\*=|%=|\\^=|&=|\\|=|<<=|>>=|='
      }
      {
        comment: 'Arithmetic operator'
        name: 'keyword.operator.arithmetic.rust'
        match: '!|\\+(?!\\+)|-(?!-)|/|\\*|%|\\^|&|\\||<<|>>'
      }
      {
        comment: 'Comparison operator (second group because of regex precedence)'
        name: 'keyword.operator.comparison.rust'
        match: '<=|>=|<|>'
      }
      {
        comment: 'Common non-existant operators'
        name: 'invalid.illegal.rust'
        match: '\\+\\+|--'
      }
      {
        comment: 'Box pattern'
        name: 'storage.modifier.box.rust'
        match: '\\bbox\\b'
      }
      {
        comment: '? operator (v1.13 onwards)'
        name: 'keyword.operator.misc.question-mark.rust'
        match: '\\?'
      }
    ]
  }

  # Punctuation

  'punctuation_braces': {
    comment: '{ and }'
    name: 'punctuation.brace.rust'
    match: '[\\{\\}]'
  }

  'punctuation_brackets': {
    comment: '[ and ]'
    name: 'punctuation.bracket.rust'
    match: '[\\[\\]]'
  }

  'punctuation_parentheses': {
    comment: '( and )'
    name: 'punctuation.parenthesis.rust'
    match: '[\\(\\)]'
  }

  'punctuation': {
    patterns: [
      { include: '#punctuation_braces' }
      { include: '#punctuation_brackets' }
      { include: '#punctuation_parentheses' }
    ]
  }

  # Grammar structures

  'sigils': {
    comment: 'Sigil'
    name: 'keyword.operator.sigil.rust'
    match: '[&*](?=[\\w\\(\\[\\|\\"]+)'
  }

  'where': {
    comment: 'Generic where clause'
    begin: '\\b(where)\\b'
    end: '(?=\\{)'
    beginCaptures: {
      '1': { name: 'keyword.other.where.rust' }
    }
    patterns: [
      { include: '#comments' }
      { include: '#structure_operators' }
      { include: '#types' }
      { include: '#traits' }
      { include: '#type_params' }
      { include: '#lifetime' }
    ]
  }

  'type_params': {
    comment: 'Type parameters'
    name: 'meta.type_params.rust'
    begin: '<(?![=<])'
    end: '>'
    patterns: [
      { include: '#comments' }
      {
        match: '\\b\\s*(=)\\s*\\b'
        captures:
          '1': { name: 'keyword.operator.type_params.rust' }
      }
      { include: '#sigils' }
      { include: '#modifiers' }
      { include: '#lifetime' }
      { include: '#types' }
      { include: '#traits' }
      { include: '#type_params' }
    ]
  }

  'lifetime': {
    comment: 'Named lifetime'
    name: 'storage.modifier.lifetime.rust'
    match: '\'([\\p{Alpha}_][\\w]*)\\b'
    captures: {
      '1': { name: 'entity.name.lifetime.rust' }
    }
  }

  'ref_lifetime': {
    comment: 'Reference with named lifetime'
    match: '(&)(\'([\\p{Alpha}_][\\w]*))\\b'
    captures: {
      '1': { name: 'keyword.operator.sigil.rust' }
      '2': { name: 'storage.modifier.lifetime.rust' }
      '3': { name: 'entity.name.lifetime.rust' }
    }
  }

  'implementation': {
    comment: 'Implementation'
    begin: '\\b(impl)\\b'
    end: '(?=[\\{])'
    beginCaptures: {
      '1': { name: 'storage.type.impl.rust' }
    }
    patterns: [
      { include: '#comments' }
      { include: '#type_params' }
      { include: '#traits' }
      {
        comment: 'Trait name (or skip if for is next)'
        begin: '([\\p{Alpha}_][\\w]*)|(?=\\s*for)'
        end: '(?=[\\{])'
        beginCaptures: {
          '1': { name: 'entity.name.type.rust' }
        }
        patterns: [
          { include: '#comments' }
          { include: '#types' }
          { include: '#traits' }
          { include: '#lifetime' }
          { include: '#type_params' }
          { include: '#where' }
          {
            begin: '\\b(for)\\b'
            end: '(?<=\\w)(?<!\\sfor)'
            beginCaptures: {
              '1': { name: 'keyword.other.for.rust' }
            }
            patterns: [
              { include: '#comments' }
              { include: '#types' }
              {
                match: '[\\p{Alpha}_][\\w]*'
                name: ''#'entity.name.type.rust'
              }
            ]
          }
        ]
      }
    ]
  }
}

patterns: [
  # Comments
  { include: '#comments' }

  # Attributes
  {
    comment: 'Attribute'
    name: 'meta.attribute.rust'
    begin: '#\\!?\\['
    end: '\\]'
    patterns: [
      { include: '#comments' }
      { include: '#string_literal' }
      {
        name: 'meta.attribute.derive.rust'
        begin: 'derive\\s*\\('
        end: '\\)'
        patterns: [
          { include: '#comments' }
          {
            name: 'support.type.attribute.core.rust'
            match: '\\b(Copy|Clone|Debug|Default|Eq|PartialEq|Ord|PartialOrd|Hash|Zero)\\b'
          }
          {
            name: 'support.name.attribute.rust'
            match: '[^\\)]*'
          }
        ]
      }
      {
        name: 'meta.attribute.repr.rust'
        begin: 'repr\\s*\\('
        end: '\\)'
        patterns: [
          { include: '#comments' }
          {
            name: 'support.type.repr.core.rust'
            match: '\\b([Cc]|[Rr]ust|packed|u8|u16|u32|u64)\\b'
          }
          {
            match: '\\s*,\\s*'
          }
          {
            name: 'invalid.illegal.rust'
            match: '[^\\),]*'
          }
        ]
      }
    ]
  }

  # Literals
  { include: '#literals' }

  # Language
  {
    comment: 'Control keyword'
    name: 'keyword.control.rust'
    match: '\\b(break|continue|else|if|in|for|loop|match|return|while|catch)\\b'
  }
  {
    comment: 'Keyword'
    name: 'keyword.other.rust'
    match: '\\b(crate|extern|mod|let|ref|use|super|as|move|dyn)\\b'
  }
  {
    comment: 'Unused reserved keyword'
    name: 'invalid.illegal.rust'
    match: '\\b(abstract|alignof|become|do|final|macro|offsetof|override|priv|proc|pure|sizeof|typeof|virtual|yield)\\b'
  }
  { include: '#sigils' }
  { include: '#modifiers' }
  { include: '#lifetime' }
  { include: '#ref_lifetime' }

  # Operators
  { include: '#operators' }
  { include: '#punctuation' }

  # Standard types and traits
  { include: '#types' }
  { include: '#special_variables' }
  { include: '#traits' }
  { include: '#macros' }

  # Function and macro calls
  {
    comment: 'Macro invocation'
    match: '\\b([\\p{Alpha}_][\\w]*\\!)'
    captures: {
      '1': { name: 'entity.name.function.macro.rust' }
    }
  }
  {
    comment: 'Function call'
    match: '\\b([\\p{Alpha}_][\\w]*)\\s*(?=\\()'
    captures: {
      '1': { name: 'entity.name.function.rust' }
    }
  }

  # Function definition
  {
    comment: 'Function definition'
    begin: '\\b(fn)\\b'
    end: '(?=[\\{;])'
    beginCaptures: {
      '1': { name: 'keyword.other.fn.rust' }
    }
    patterns: [
      { include: '#comments' }
      {
        begin: '([\\p{Alpha}_][\\w]*)'
        end: '(?=[\\{;])'
        beginCaptures: {
          '1': { name: 'entity.name.function.rust' }
        }
        patterns: [
          { include: '#comments' }
          { include: '#structure_operators' }
          { include: '#special_variables' }
          { include: '#ref_lifetime' }
          { include: '#sigils' }
          { include: '#lifetime' }
          { include: '#modifiers' }
          { include: '#types' }
          { include: '#traits' }
          { include: '#type_params' }
          { include: '#where' }
          {
            comment: 'Function arguments'
            match: 'fn'
            name: 'keyword.other.fn.rust'
          }
        ]
      }
    ]
  }

  # Type declaration
  {
    comment: 'Type declaration'
    begin: '\\b(enum|struct|trait|union)\\b'
    end: '(?=[\\{\\(;])'
    beginCaptures: {
      '1': { name: 'storage.type.rust' }
    }
    patterns: [
      { include: '#comments' }
      {
        begin: '([\\p{Alpha}_][\\w]*)'
        end: '(?=[\\{;])'
        beginCaptures: {
          '1': { name: 'entity.name.type.rust' }
        }
        patterns: [
          { include: '#comments' }
          { include: '#structure_operators' }
          { include: '#sigils' }
          { include: '#modifiers' }
          { include: '#traits' }
          { include: '#type_params' }
          { include: '#types' }
          { include: '#modifiers' }
          { include: '#where' }
        ]
      }
    ]
  }

  # Type alias
  {
    comment: 'Type alias'
    begin: '\\b(type)\\b'
    end: '(?=;)'
    beginCaptures: {
      '1': { name: 'storage.type.rust' }
      '2': { name: 'entity.name.type.rust' }
    }
    patterns: [
      { include: '#comments' }
      {
        begin: '([\\p{Alpha}_][\\w]*)'
        end: '(?=[\\{;])'
        beginCaptures: {
          '1': { name: 'entity.name.type.rust' }
        }
        patterns: [
          { include: '#comments' }
          { include: '#punctuation' }
          { include: '#operators' }
          { include: '#sigils' }
          { include: '#modifiers' }
          { include: '#lifetime' }
          { include: '#ref_lifetime' }
          { include: '#types' }
          { include: '#traits' }
          { include: '#type_params' }
        ]
      }
    ]
  }

  # Implementation
  { include: '#implementation' }
]
